import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

	static int N;
	static int[][] map1;
	static int[][] map2;
	static boolean[][] visited;
	static int[] dr = { -1, 0, 1, 0 };
	static int[] dc = { 0, 1, 0, -1 };
	static int ans = 0;
	static int notnorm = 0;

	public static void main(String[] args) {
		Scanner scann = new Scanner(System.in);
		N = scann.nextInt();
		map1 = new int[N][N];
		map2 = new int[N][N];
		visited = new boolean[N][N];
		for (int i = 0; i < N; i++) {
			String s = scann.next();
			char[] ch = s.toCharArray();
			for (int j = 0; j < N; j++) {
				if (ch[j] == 'B') {
					map1[i][j]=2;
					map2[i][j] = 2;
				} else {
					map2[i][j] = 1;
					if(ch[j]=='R') {
						map1[i][j]=1;
					}
					if(ch[j]=='G') {
						map1[i][j]=3;
					}
				}
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (!visited[i][j]) {
					norm_bfs(i, j);
				}
			}
		}
		visited=new boolean[N][N];
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (!visited[i][j]) {
					bfs(i, j);
				}
			}
		}
		
		System.out.print(ans + " ");
		System.out.print(notnorm);
	}

	private static void norm_bfs(int r, int c) {
		Queue<Node> q = new LinkedList<Node>();
		q.offer(new Node(r, c));
		visited[r][c] = true;
		int size=0;
		while (!q.isEmpty()) {
			size = q.size();
			for (int i = 0; i < size; i++) {
				Node temp = q.poll();
				for (int d = 0; d < 4; d++) {
					int nr = temp.r + dr[d];
					int nc = temp.c + dc[d];
					if (isChecked(nr, nc) && !visited[nr][nc] && map1[nr][nc] == map1[r][c]) {
						visited[nr][nc] = true;
						q.offer(new Node(nr, nc));
					}
				}
			}
		}
		ans++;
	}

	private static void bfs(int r, int c) {
		Queue<Node> q = new LinkedList<Node>();
		q.offer(new Node(r, c));
		visited[r][c] = true;
		int size = 0;
		while (!q.isEmpty()) {
			size = q.size();
			for (int i = 0; i < size; i++) {
				Node temp = q.poll();
				for (int d = 0; d < 4; d++) {
					int nr = temp.r + dr[d];
					int nc = temp.c + dc[d];
					if (isChecked(nr, nc) && !visited[nr][nc] && map2[nr][nc] == map2[r][c]) {
						visited[nr][nc] = true;
						q.offer(new Node(nr, nc));

					}
				}
			}
		}
		notnorm++;
	}

	private static boolean isChecked(int nr, int nc) {
		return nr >= 0 && nr < N && nc >= 0 && nc < N;
	}

	private static class Node {
		int r;
		int c;

		public Node(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}

	}
}
