import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

	static int N, K;
	static boolean[] visited = new boolean[100001];
	static int time = 0, ans = 0;

	public static void main(String[] args) {
		Scanner scann = new Scanner(System.in);
		N = scann.nextInt();
		K = scann.nextInt();
		if (N == K) {
			System.out.println(0);
			System.out.println(1);
			return;
		}
		bfs(N);
		System.out.println(time + "\n" + ans);
	}

	private static void bfs(int n) {
		Queue<Integer> q = new LinkedList<Integer>();
		q.offer(n);

		while (!q.isEmpty()) {
			int size = q.size();
			time++;
			for (int i = 0; i < size; i++) {

				int temp = q.poll();
				visited[temp]=true;
				for (int j = 0; j < 3; j++) {
					int next = 0;

					if (j == 0) {
						next = temp + 1;
					} else if (j == 1) {
						next = temp - 1;
					} else if (j == 2) {
						next = temp * 2;
					}

					if (next >= 0 && next < visited.length && !visited[next]) {
						if (next == K) {
							ans++;
							continue;
						}
						q.offer(next);
					}
				}
			}
			if(ans!=0) {
				q.clear();
			}
		}
	}
}
