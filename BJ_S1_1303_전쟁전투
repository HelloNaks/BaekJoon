import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int N, M;
	static int[][] map;
	static boolean[][] visited;
	static int w=0;
	static int b=0;
	static int[] dr= {-1,0,1,0};
	static int[] dc= {0,1,0,-1};
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N=Integer.parseInt(st.nextToken());
		M=Integer.parseInt(st.nextToken());
		map=new int[M][N];
		visited=new boolean[M][N];
		for (int i = 0; i < M; i++) {
			String s=br.readLine();
			char[] ch =s.toCharArray();
			for (int j = 0; j < N; j++) {
				if(ch[j]=='W') {
					map[i][j]=1;
				}else {
					map[i][j]=2;
				}
			}
		}
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if(!visited[i][j]) {
					if(map[i][j]==1) {
						w+=Math.pow(bfs(1,i,j),2);
					}else {
						b+=Math.pow(bfs(2,i,j),2);
					}
				}
			}
		}
		System.out.println(w+" "+b);
	}
	private static int bfs(int tot, int r, int c) {
		Queue<Node> q = new LinkedList<Node>();
		visited[r][c]=true;
		q.offer(new Node(r,c));
		int cnt=0;
		while(!q.isEmpty()) {
			cnt++;
			Node temp=q.poll();
			for (int d = 0; d < 4; d++) {
				int nr=temp.r+dr[d];
				int nc = temp.c+dc[d];
				if(isChecked(nr,nc) && map[nr][nc]==tot && !visited[nr][nc]) {
					q.offer(new Node(nr,nc));
					visited[nr][nc]=true;
				}
			}
		}
		return cnt;
	}

	private static boolean isChecked(int nr, int nc) {
		return nr>=0 &&nr<M && nc>=0 &&nc<N;
	}

	private static class Node {
		int r;
		int c;
		public Node(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}
	}
}
