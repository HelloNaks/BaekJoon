import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int N, M;
	static int[][] map;
	static boolean[][] visited;
	static int ans = 1;
	static int[] dr = { -1, 0, 1, 0 };
	static int[] dc = { 0, 1, 0, -1 };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		visited = new boolean[N][M];
		for (int i = 0; i < N; i++) {
			String s = br.readLine();
			char[] ch = s.toCharArray();
			for (int j = 0; j < ch.length; j++) {
				map[i][j] = (int) ch[j] - '0';
			}
		}

		bfs(0, 0);
		System.out.println(ans);
	}

	private static void bfs(int r, int c) {
		Queue<Node> q = new LinkedList<Node>();
		q.offer(new Node(r, c));
		visited[r][c]=true;
		int size = 0;
		while (!q.isEmpty()) {
			size = q.size();
			for (int i = 0; i < size; i++) {
				Node temp = q.poll();
				for (int d = 0; d < 4; d++) {
					int nr = temp.r + dr[d];
					int nc = temp.c + dc[d];

					if(nr==N-1 && nc == M-1) {
						ans++;
						return;
					}
					if (isChecked(nr, nc) && map[nr][nc] == 1 && !visited[nr][nc]) {
						visited[nr][nc]=true;
						q.offer(new Node(nr, nc));
					}
				}
				
			}

			ans++;
		}
	}

	private static boolean isChecked(int nr, int nc) {
		return nr >= 0 && nr < N && nc >= 0 && nc < M;
	}

	static class Node {
		int r;
		int c;

		public Node(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}
	}
}
