import java.util.Scanner;

public class Main {

	static int N;
	static int [][]map;
	static boolean [][]visited;
	static int max=1;
	static int min=100;
	static int ans=1;
	static int num=0;
	static int [] dr= {-1,0,1,0};
	static int [] dc= {0,1,0,-1};
	public static void main(String[] args) {
		Scanner scann = new Scanner(System.in);
		N=scann.nextInt();
		map=new int[N][N];
		visited=new boolean[N][N];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				map[i][j]=scann.nextInt();
				if(map[i][j]>max) {
					max=map[i][j];
				}
				if(map[i][j]<min) {
					min=map[i][j];
				}
			}
		}
		for (int i = min; i < max; i++) {
			num=0;
			visited=new boolean[N][N];
			
			for (int j = 0; j < N; j++) {
				for (int j2 = 0; j2 < N; j2++) {
					if(map[j][j2]>i && !visited[j][j2]) {
						visited[j][j2]=true;
						num++;
						dfs(j, j2, i);
					}
				}
			}
			ans = Math.max(ans, num);
		}
		System.out.println(ans);
	}

	private static void dfs(int r, int c, int h) {
		for (int d = 0; d < 4; d++) {
			int nr=r+dr[d];
			int nc=c+dc[d];
			if(isChecked(nr,nc) && !visited[nr][nc] && map[nr][nc]>h) {
				visited[nr][nc]=true;
				dfs(nr,nc, h);
			}
		}
	}

	private static boolean isChecked(int nr, int nc) {
		return nr>=0 && nr<N && nc>=0 && nc<N;
	}
}
