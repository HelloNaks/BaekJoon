import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

	static int n;
	static int first, second;
	static int m;
	static int[][] map;
	static boolean[] visited;

	public static void main(String[] args) {
		Scanner scann = new Scanner(System.in);
		n = scann.nextInt();
		map = new int[n + 1][n + 1];
		visited = new boolean[n + 1];
		first = scann.nextInt();
		second = scann.nextInt();
		m = scann.nextInt();
		for (int i = 0; i < m; i++) {
			int a = scann.nextInt();
			int b = scann.nextInt();
			map[a][b] = 1;
			map[b][a] = 1;
		}
		bfs(first, second);

	}

	private static void bfs(int first, int second) {
		boolean isFind=false;
		Queue<Person> q = new LinkedList<Person>();
		q.offer(new Person(first,0));
		visited[first] = true;
		while (!q.isEmpty()) {
			Person temp = q.poll();
			
			if (temp.x == second) {
				isFind=true;
				System.out.println(temp.cnt);
				return;
			}
			for (int j = 1; j <= n; j++) {
				if (map[temp.x][j] == 1 && !visited[j]) {
					visited[j]=true;
					q.offer(new Person(j,temp.cnt+1));
				}
			}
		}
		System.out.println("-1");
	}
	private static class Person {
        int x; 
        int cnt; 

        public Person(int x, int cnt) {
            this.x = x;
            this.cnt = cnt;
        }
    }
}
