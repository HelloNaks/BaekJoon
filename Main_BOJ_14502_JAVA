import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

	static class virus{
		int x, y;

		public virus(int x, int y) {
			super();
			this.x = x;
			this.y = y;
		}
	}
	static int N, M;
	static int[][] map;
	static int[][] new_map;
	static int max = Integer.MIN_VALUE;
	static int[] dr= {-1,1,0,0};
	static int[] dc= {0,0,-1,1};
	static int result=Integer.MIN_VALUE;
	public static void main(String[] args) {
		Scanner scann = new Scanner(System.in);
		N=scann.nextInt();
		M=scann.nextInt();
		map=new int[N][M];
		new_map=new int[N][M];
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				map[i][j]=scann.nextInt();
			}
		}
		new_map=map;
		dfs(0);
		System.out.println(result);
 	}
	public static void dfs(int count) {
		if(count==3) {
			bfs();
			return;
		}
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(map[i][j]==0) {
					map[i][j]=1;
					dfs(count+1);
					map[i][j]=0;
				}
			}
		}
	}
	private static void bfs() {
		int [][] virus_map=new int[N][M];
		Queue<virus> q = new LinkedList<virus>();
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				virus_map[i][j]=map[i][j];
			}
		}
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(virus_map[i][j]==2) {
					q.add(new virus(i,j));
				}
			}
		}
		
		while(!q.isEmpty()) {
			virus v=q.poll();
			for (int d = 0; d < 4; d++) {
				int nr=v.x+dr[d];
				int nc=v.y+dc[d];
				
				if(nr>=0 && nc>=0 && nr<N && nc<M) {
					if(virus_map[nr][nc]==0) {
						virus_map[nr][nc]=2;
						q.add(new virus(nr,nc));
					}
				}
			}
		}
		maxx(virus_map);
	}
	private static void maxx(int[][] virus_map) {
		int count = 0;
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(virus_map[i][j]==0) count++;
			}
		}
		result=Math.max(count, result);
	}

}
