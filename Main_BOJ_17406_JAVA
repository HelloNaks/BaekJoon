import java.util.Scanner;

public class Main{

	static int N, M, K;
	static int[][] A, Copy;
	static int[][] KA;
	static int[] dr = { 1, 0, -1, 0 };
	static int[] dc = { 0, 1, 0, -1 };
	static int KK; // 몇 겹
	static int[] num;
	static boolean[] v;
	static int min;
	static int count;

	public static void main(String[] args) {
		Scanner scann = new Scanner(System.in);
		N = scann.nextInt();
		M = scann.nextInt();
		K = scann.nextInt();
		A = new int[N][M];
		Copy=new int[N][M];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				A[i][j] = scann.nextInt();
			}
		}
		KA = new int[K][3];
		for (int i = 0; i < K; i++) {
			for (int j = 0; j < 3; j++) {
				KA[i][j] = scann.nextInt();
			}
		}
		// -----------------
		// 로직
		count=0;
		min = Integer.MAX_VALUE;
		num = new int[K];
		v = new boolean[K];
		nPr(0);
		// 출력
		System.out.println(min);
		// print();

	}

	private static void nPr(int cnt) {
		if (cnt == K) {
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					Copy[i][j] = A[i][j];
				}
			}
			// 로직
			for (int i = 0; i < num.length; i++) {
				clock(num[i]);
			}
			min=Math.min(min, calculate());
			return;
		}
		for (int i = 0; i < K; i++) {
			if (v[i])
				continue;
			v[i] = true;
			num[cnt] = i;
			nPr(cnt + 1);
			v[i] = false;
		}
	}

	private static int calculate() {
		int minC=Integer.MAX_VALUE;
		for(int i=0;i<N;i++) {
			int sum=0;
			for (int j = 0; j < M; j++) {
				sum+=Copy[i][j];
			}
			minC=Math.min(minC, sum);
		}
		return minC;
	}

	private static void clock(int ika) {
		int[] kmap=KA[ika];
		int sr=(kmap[0]-kmap[2])-1;	// 4 3 2 4-2-1 1 3-2-12 0
		int sc=(kmap[1]-kmap[2])-1;
		int er=(kmap[0]+kmap[2])-1;
		int ec=(kmap[1]+kmap[2])-1;
		
		int k2=Math.min((er-sr), (ec-sc))/2;
		
		for(int boundary=0;boundary<k2;boundary++) {
			int r=boundary+sr;	//시작위치 (0,0) -> (1,1)
			int c =boundary+sc;
			int d=0;
			int temp=Copy[r][c];
			while(d<4){
				int nr=r+dr[d];
				int nc=c+dc[d];
				if(nr>=boundary+sr && nr<er+1-boundary
						&& nc>=boundary+sc && nc<ec+1-boundary) {
					Copy[r][c]=Copy[nr][nc];
					r=nr;
					c=nc;
				}else {
					d++;
				}
			}
			Copy[boundary+sr][boundary+sc+1]=temp;
		}
	}

	private static void print() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				System.out.print(A[i][j] + " ");
			}
			System.out.println();
		}
	}

}
