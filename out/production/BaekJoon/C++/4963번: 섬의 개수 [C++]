#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>

using namespace std;
int map[51][51] = { 0 };
bool visited[51][51];
int answer = 0;
int dx[] = { 0,1,1,1,0,-1,-1,-1 };
int dy[] = { -1,-1,0,1,1,1,0,-1 };

void dfs(int N, int M, int x, int y)
{
	visited[x][y] = 1;
	for (int i = 0; i < 8; i++)
	{
		int xx = x + dx[i];
		int yy = y + dy[i];
		if (xx>=0 && yy>=0 && xx<N && yy<M && map[xx][yy] == 1 && !visited[xx][yy])
		{
			visited[xx][yy] = 1;
			dfs(N, M, xx, yy);
		}
	}
	return;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int w, h;

	while (true)
	{
		cin >> w >> h;
		if (w == 0 && h == 0)
			break;
		answer = 0;
		memset(map, 0, sizeof(map));
		memset(visited, 0, sizeof(visited));
	
		for (int i = 0; i < h; i++)
		{
			for (int j = 0; j < w; j++)
			{
				cin >> map[i][j];
			}
		}

		for (int j = 0; j < h; j++)
		{
			for (int k = 0; k < w; k++)
			{
				if (map[j][k] == 1 && !visited[j][k])
				{
					dfs(h, w, j, k);
					answer++;
				}
			}
		}
		cout << answer << '\n';
	}
	return 0;
}
