import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

	static int N, M, K;
	static int[][] map;
	static boolean[][] visited;
	static int[] dr= {-1,0,1,0};
	static int[] dc= {0,1,0,-1};
	static int ans=0;
	static Queue<Integer> q = new LinkedList<Integer>();
	
	public static void main(String[] args) {
		Scanner scann = new Scanner(System.in);
		M=scann.nextInt();
		N=scann.nextInt();
		K=scann.nextInt();
		map=new int[M][N];
		visited=new boolean[M][N];
		for (int i = 0; i < K; i++) {
			int y1=scann.nextInt();
			int x1=scann.nextInt();
			int y2=scann.nextInt();
			int x2=scann.nextInt();
			for (int j = x1; j < x2; j++) {
				for (int j2 = y1; j2 < y2; j2++) {
					map[j][j2]=1;
				}
			}
		}
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				if(!visited[i][j] && map[i][j]==0) {
					ans=0;
					dfs(i,j);
					q.offer(ans);
				}
			}
		}
		int[] t=new int[q.size()];
		int num=0;
		while(!q.isEmpty()) {
			t[num++]=q.poll();
		}
		Arrays.sort(t);
		System.out.println(t.length);
		for(int i: t) {
			System.out.print(i+" ");
		}
	}

	private static void dfs(int r, int c) {
		visited[r][c]=true;
		ans++;
		for (int d = 0; d < 4; d++) {
			int nr=r+dr[d];
			int nc=c+dc[d];
			if(isChecked(nr,nc) && !visited[nr][nc] && map[nr][nc]==0) {
				dfs(nr,nc);
			}
		}
	}

	private static boolean isChecked(int nr, int nc) {
		return nr>=0 && nr<M && nc>=0 && nc<N;
	}
}
