import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

	static int N, M;
	static int[][] map;
	static boolean[][] visited;
	static int[] dr = { -1, -1, 0, 1, 1, 1, 0, -1 };
	static int[] dc = { 0, 1, 1, 1, 0, -1, -1, -1 };
	static int cnt = 0;

	public static void main(String[] args) {
		Scanner scann = new Scanner(System.in);
		do {
			cnt=0;
			M = scann.nextInt();
			N = scann.nextInt();
			map = new int[N][M];
			visited = new boolean[N][M];

			// 입력받음
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					map[i][j] = scann.nextInt();
				}
			}
			
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					if (map[i][j] == 1 && !visited[i][j]) {
						bfs(i, j);
						cnt++;
					}
				}
			}
			if(N==0 && M==0) {
				break;
			}
			System.out.println(cnt);

		} while (!(N == 0 && M == 0));
	}

	private static void bfs(int r, int c) {
		Queue<Node> q = new LinkedList<Node>();
		q.offer(new Node(r, c));
		visited[r][c] = true;
		while (!q.isEmpty()) {
			Node temp = q.poll();
			for (int d = 0; d < 8; d++) {
				int nr = temp.r + dr[d];
				int nc = temp.c + dc[d];
				if (isChecked(nr, nc) && map[nr][nc] == 1 && !visited[nr][nc]) {
					q.offer(new Node(nr, nc));
					visited[nr][nc] = true;
				}
			}
		}
	}

	private static boolean isChecked(int nr, int nc) {
		return nr >= 0 && nr < N && nc >= 0 && nc < M;
	}

	static class Node {
		int r;
		int c;

		public Node(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}

	}
}
