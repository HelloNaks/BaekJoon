#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>

using namespace std;
int map[101][101] = { 0 };
char c_map[101][101] = { 0 };
bool visited[101][101];
int answer = 0;
int dx[] = { 0,1,0,-1 };
int dy[] = { -1,0,1,0 };

void dfs(int N, int x, int y, int a)
{
	visited[x][y] = 1;
	for (int i = 0; i < 4; i++)
	{
		int xx = x + dx[i];
		int yy = y + dy[i];
		if (xx >= 0 && yy >= 0 && xx < N && yy < N && map[xx][yy] == a && !visited[xx][yy])
		{
			visited[xx][yy] = 1;
			dfs(N, xx, yy, a);
		}
	}
	return;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int N;

	scanf("%d", &N);
	char c;
	scanf("%c", &c);

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			scanf("%1c", &c_map[i][j]);
		}
		scanf("%1c", &c);
	}

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (c_map[i][j] == 'R')
			{
				map[i][j] = 1;
			}
			else if (c_map[i][j] == 'B')
			{
				map[i][j] = 2;
			}
			else if (c_map[i][j] == 'G')
			{
				map[i][j] = 3;
			}
		}
	}

	//적록색약X
	for (int p = 1; p <= 3; p++)
	{
		for (int j = 0; j < N; j++)
		{
			for (int k = 0; k < N; k++)
			{
				if (map[j][k] == p && !visited[j][k])
				{
					dfs(N, j, k, p);
					answer++;
				}
			}
		}
	}
	printf("%d ", answer);
	answer = 0;
	memset(visited, 0, sizeof(visited));

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (map[i][j] == 3)
				map[i][j] = 1;
		}
	}
	//적록색약
	for (int p = 1; p <= 3; p++)
	{
		for (int j = 0; j < N; j++)
		{
			for (int k = 0; k < N; k++)
			{
				if (map[j][k] == p && !visited[j][k])
				{
					dfs(N, j, k, p);
					answer++;
				}
			}
		}
	}
	printf("%d\n", answer);

	return 0;
}
