#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>

using namespace std;
int map[51][51] = { 0 };
bool visited[51][51];
int answer = 0;
int dx[] = { 0,1,0,-1 };
int dy[] = { -1,0,1,0 };

void dfs(int N, int M, int x, int y)
{
	visited[x][y] = 1;
	for (int i = 0; i < 4; i++)
	{
		int xx = x + dx[i];
		int yy = y + dy[i];
		if (xx>=0 && yy>=0 && xx<N && yy<M && map[xx][yy] == 1 && !visited[xx][yy])
		{
			visited[xx][yy] = 1;
			dfs(N, M, xx, yy);
		}
	}
	return;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int T, N, M, K;
	cin >> T;

	for (int i = 0; i < T; i++)
	{
		cin >> M >> N >> K;
		answer = 0;
		memset(map, 0, sizeof(map));
		memset(visited, 0, sizeof(visited));
		for (int j = 0; j < K; j++)
		{
			int a, b;
			cin >> a >> b;
			map[b][a] = 1;
		}

		//for (int i = 0; i < N; i++)
		//{
		//	for (int j = 0; j < M; j++)
		//	{
		//		cout << map[i][j] << ' ';
		//	}
		//	cout << '\n';
		//}

		for (int j = 0; j < N; j++)
		{
			for (int k = 0; k < M; k++)
			{
				if (map[j][k] == 1 && !visited[j][k])
				{
					dfs(N, M, j, k);
					answer++;
				}
			}
		}
		cout << answer << '\n';
	}
	return 0;
}
