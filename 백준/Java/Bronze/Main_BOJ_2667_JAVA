import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int N;
	static int[] dr= {0,1,0,-1};
	static int[] dc= {1,0,-1,0};
	static int[][] map;
	static boolean[][] visited;
	static int[] num;
	static int temp;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		
		N=Integer.parseInt(br.readLine());
		map=new int[N][N];
		visited=new boolean[N][N];
		for (int i = 0; i < N; i++) {
			String s = br.readLine();
			char[] ch = new char[N];
			ch=s.toCharArray();
			for (int j = 0; j < N; j++) {
				map[i][j]=(int) ch[j]-'0';
			}
		}
		
		temp=0;
		num = new int[1000];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if(map[i][j]==1 && !visited[i][j]) {
					num[temp]++;
					dfs(i,j,temp);
					temp++;
				}
			}
		}

		int[] ans=new int[temp];
		for (int i = 0; i < temp; i++) {
			ans[i]=num[i];
		}
		Arrays.sort(ans);
		
		System.out.println(temp);
		for (int i = 0; i < temp; i++) {
			System.out.println(ans[i]);
		}
	}
	private static void dfs(int i, int j, int t) {
		visited[i][j]=true;
		for (int d = 0; d < 4; d++) {
			int nr=i+dr[d];
			int nc=j+dc[d];
			if(nr>=0 && nr<N && nc>=0 && nc<N) {
				if(map[nr][nc]==1 && !visited[nr][nc]) {
					num[t]++;
					dfs(nr,nc,t);
				}
			}
		}
	}
}
