import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int R, C;
	static int[][] map;
	static int[] dr = { -1, 0, 1, 0 };
	static int[] dc = { 0, 1, 0, -1 };
	static int ans = 0;
	static Queue<Node> Jq = new LinkedList<Node>();
	static Queue<Node> Fq = new LinkedList<Node>();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		map = new int[R][C];

		for (int i = 0; i < R; i++) {
			String s = br.readLine();
			char[] ch = s.toCharArray();
			for (int j = 0; j < C; j++) {
				if (ch[j] == '#') {
					map[i][j] = -1;
				} else if (ch[j] == 'J') {
					map[i][j] = 1;
					Jq.offer(new Node(i, j));
				} else if (ch[j] == 'F') {
					map[i][j] = -2;
					Fq.offer(new Node(i, j));
				} else {
					map[i][j] = 0;
				}
			}
		}

		bfs();
	}

	private static void bfs() {
		int cnt = 0;

		while (true) {
			cnt++;
			
			int fsize = Fq.size();
			while (fsize > 0) {
				fsize--;
				Node temp = Fq.poll();
				for (int d = 0; d < 4; d++) {
					int nr = temp.r + dr[d];
					int nc = temp.c + dc[d];
					if (isChecked(nr, nc) && map[nr][nc] >= 0) {
						Fq.offer(new Node(nr, nc));
						map[nr][nc] = -2;
					}
				}
			}
			int size = Jq.size();
			while (size > 0) {
				size--;
				Node temp = Jq.poll();
				for (int d = 0; d < 4; d++) {
					int nr = temp.r + dr[d];
					int nc = temp.c + dc[d];
					if (isEnd(nr,nc)) {
						System.out.println(cnt);
						return;
					}
					if (map[nr][nc] == 0) {
						map[nr][nc] = 1;
						Jq.offer(new Node(nr, nc));
					}
				}
			}
			if(Jq.isEmpty()) {
				System.out.println("IMPOSSIBLE");
				return;
			}
		}
	}

	private static boolean isChecked(int nr, int nc) {
		return nr >= 0 && nr < R && nc >= 0 && nc < C;
	}

	private static boolean isEnd(int nr, int nc) {
		return nr < 0 || nc < 0 || nr >= R || nc >= C;
	}

	private static class Node {
		int r;
		int c;

		public Node(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}
	}
}
