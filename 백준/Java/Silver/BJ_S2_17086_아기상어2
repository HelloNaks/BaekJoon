import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

	static int N, M;
	static int[][] map;
	static int max = 0;
	static int[] dr = { -1, -1, 0, 1, 1, 1, 0, -1 };
	static int[] dc = { 0, 1, 1, 1, 0, -1, -1, -1 };
	static boolean[][] visited;

	public static void main(String[] args) {
		Scanner scann = new Scanner(System.in);
		N = scann.nextInt();
		M = scann.nextInt();
		map = new int[N][M];
		visited = new boolean[N][M];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				map[i][j] = scann.nextInt();
			}
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				visited = new boolean[N][M];
				if (map[i][j] == 0) {
					max = Math.max(max, bfs(i, j));
				}
			}
		}
		System.out.println(max);
	}

	private static int bfs(int i, int j) {
		Queue<Node> q = new LinkedList<Node>();
		q.offer(new Node(i, j));
		visited[i][j] = true;
		int cnt = 0;

		while (!q.isEmpty()) {
			cnt++;
			int size = q.size();
			for (int k = 0; k < size; k++) {
				Node temp = q.poll();
				for (int d = 0; d < 8; d++) {
					int nr = temp.r + dr[d];
					int nc = temp.c + dc[d];
					if (isChecked(nr, nc) && map[nr][nc] == 1) {
						return cnt;
					}
					if (isChecked(nr, nc) && map[nr][nc] == 0 && !visited[nr][nc]) {
						visited[nr][nc] = true;
						q.offer(new Node(nr, nc));
					}
				}
			}
		}
		return 0;
	}

	private static boolean isChecked(int nr, int nc) {
		return nr >= 0 && nr < N && nc >= 0 && nc < M;
	}

	private static class Node {
		int r;
		int c;

		public Node(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}

	}

}
